/* bubblesort.c */

#include <stdio.h> /*printf und scanf*/
#include <stdlib.h> /*malloc*/
#include <time.h> /*fuer srand operation mit time()*/

/**
 * Bubblesort liest ganze Zahlen ein und sortiert sie aufsteigend.
 * @author Kieser
 * @version 10.4.2015
 */

/**
 * main ist der Startpunkt des Programms.
 * @param argc Argument Counter, ersetzt args.length aus Java.
 *              Hier wird die Anzahl der erhaltenen Werte gespeichert.
 * @param *argv Argument Variable, Zeiger auf ein char Array.
 *               Hier wird der Wert gespeichert.
 *              In diesem Programm also die Anzahl der einzugebenden Zahlen.(z.B. 4, dann muessen spaeter 4 zahlen eingegeben werden die sortiert werden
 */
int main(int argc, char *argv[])
{
    /*Deklarationen*/
    
    int n;  /*in argv[0] ist der ProgrammPfad gespeichert hier "/bubblesort" */
    int * a; /* fuer Speicher reservierung*/
    int i; /*fuer die spaeteren for Schleifen | außen*/
    int j; /*for beim sortieren | innen*/
    int tmp; /*temporaerer Wert in for Schleifen*/

    srand((unsigned int) time(NULL)); /*initialisieren des Random*/
    /*In Java:  final Random random = new Random();*/
    
    /*Checks*/
    
    if (argc != 2)
    {
        printf("Aufruf: java Bubblesort Anzahl (du hast nicht eine Ziffer fuer die Anzahl eingegeben!)");
        return 1;/*TODO return 1(fehler) oder 0(ok) ??*/
    }


    /*Wertzuweisungen*/
    
    n = atoi(argv[1]);/*in Java:  Integer.parseInt(args[0])  | also uebernimmt zweites Element von Array argv und speicherts in n vom Typ Int*/

    a = (int*) malloc(n * sizeof(int));
    if (a == NULL) /*Pruefung fuer malloc Speicher-Typ*/
    {
        printf("Speicherreservierung fehlgeschlagen!\n");
    }


    /*Programm*/

    printf("Testausgabe von argc: %d\n", argc);
    printf("Testausgabe von argv: %s\n", argv[0]);


    printf("Bitte %d ganze Zahlen eingeben:\n", n);

    for (i = 0; i < n; ++i)
    {
        
        if (scanf("%d", &a[i]) == 1)  /*will eine Int zahl, deshalb %d, speicher diese in Adresse &a[i] | funktion selbst gibt als rückgabewert die Anzahl der eingegebenen Werte*/
        {
            
        }
        else
        {
            a[i] = rand(); /*Java:  a[i] = random.nextInt();*/
            printf("%d\n", a[i]);
            /*printf("a%d: %d\n", i, a[i]);*/
        }
    }

    /*--------------------------------------------------- Zahlen sortieren*/
    for ( i = n ; i > 1; i--)
    {
        /* groessten Wert nach hinten schieben*/
        
        for ( j = 0; j < i - 1; ++j)
        {
            if (a[j] > a[j + 1])
            {
                /* Werte tauschen */
                tmp = a[j + 1];
                a[j + 1] = a[j];
                a[j] = tmp;
            }
        }
    }

    /*---------------------------------------------------- Zahlen ausgeben*/
    printf("Sortierte Zahlenfolge:\n");

    for (i = 0; i < n; ++i)
    {
        printf("%d\n", a[i]);
        /*printf("a%d: %d\n", i, a[i]);*/
    }

    free(a); /*Freigabe des Speichers*/
    return 0;
}

